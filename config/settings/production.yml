# Production environment configuration. These should generally receive values
# in settings.local.yml for deployed instances. If running a multi-environment
# instance for testing or debugging, production.local.yml may be helpful. As-is,
# they are compatible with a typical container-style approach, where default
# ports on generic hostnames are used for each service/resource.

hostname: <%= ENV['APP_HOSTNAME'] || 'deepblue.lib.umich.edu' %>

hyrax:
  redis_namespace: <%= ENV['REDIS_NS'] || 'deepbluedata-production' %>

fedora:
  url: http://fcrepo/fedora/rest
  base_path: /deepbluedata-production

solr:
  url: http://solr/solr/deepbluedata-production

redis:
  url: redis://redis/

# The shoulder is made invalid here to avoid unintentionally creating
# identifiers in a test namespace and appearing to work if left unconfigured.
ezid:
  host: ez.datacite.org
  shoulder: invalid:invalid

datacite:
  active: true
  mode: test
  user: datacite.invalid
  password: datacitepassword.invalid
  prefix: 10.5072/FK2

google_analytics_3:
  enabled: false

google_analytics_4:
  enabled: false

jira:
  active: false
  username: development_jirausername.invalid
  password: development_jirapassword.invalid
  site_url: https://tools.lib.umich.edu

teamdynamix:
  active: false
  tdx_server: undefined
  use_new_api: true
  client_id: teamdynamix.client_id.invalid
  client_secret: teamdynamix.client_secret.invalid
  tdx_rest_url: teamdynamix.tdx_rest_url.invalid

rails:
  database:
    database: db/production.sqlite3
  # Set the key base in settings.local.yml or production.local.yml or use the
  # SECRET_KEY_BASE environment variable, which will take precedence. It is
  # left nil here to trigger the error message from Rails if not specified.
  secret_key_base:
  cable:
    adapter: redis
    url: redis://redis/
    channel_prefix: deepbluedata-production

hyrax_orcid:
  client_id: orcid_client_id.invalid
  client_secret: orcid_client_secret.invalid
  redirect_url: http://localhost/data/dashboard/orcid_identity/new
